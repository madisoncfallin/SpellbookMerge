using Kingmaker.Blueprints;
using Kingmaker.Utility;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;


namespace SpellbookMerge.Config
{
    public class Blueprints : IOverridable
    {
        [JsonProperty]
        public bool OverrideIds { get; private set; }

        [JsonProperty]
        public readonly SortedDictionary<string, Guid> NewBlueprints = new SortedDictionary<string, Guid>();
        [JsonProperty]
        public readonly SortedDictionary<string, Guid> AutoGenerated = new SortedDictionary<string, Guid>();
        [JsonProperty]
        public readonly SortedDictionary<string, Guid> UnusedGuids = new SortedDictionary<string, Guid>();
        public readonly SortedDictionary<string, Guid> UsedGuids = new SortedDictionary<string, Guid>();
        private static JsonSerializerSettings? _cachedSettings;
        private static JsonSerializerSettings SerializerSettings {
            get
            {
                return _cachedSettings ??= new JsonSerializerSettings
                {
                    CheckAdditionalContent = false,
                    ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                    DefaultValueHandling = DefaultValueHandling.Include,
                    FloatParseHandling = FloatParseHandling.Double,
                    Formatting = Formatting.Indented,
                    MetadataPropertyHandling = MetadataPropertyHandling.ReadAhead,
                    MissingMemberHandling = MissingMemberHandling.Ignore,
                    NullValueHandling = NullValueHandling.Ignore,
                    ObjectCreationHandling = ObjectCreationHandling.Replace,
                    PreserveReferencesHandling = PreserveReferencesHandling.None,
                    StringEscapeHandling = StringEscapeHandling.Default,
                };
            }
        }

        public BlueprintGuid GetGuiD(string name) {
            if (!NewBlueprints.TryGetValue(name, out var id)) {
#if DEBUG
                if (!AutoGenerated.TryGetValue(name, out id)) {
                    id = Guid.NewGuid();
                    AutoGenerated.Add(name, id);
                    Main.LogDebug($"Generated new GUID: {name} - {id}");
                } else {
                    Main.LogDebug($"WARNING: GUID: {name} - {id} is autogenerated");
                }
#endif
            }
            UsedGuids[name] = id;
            return new BlueprintGuid(id);
        }

        public void OverrideFrom(string userConfigDir)
        {
            var blueprintsFile = Path.Combine(userConfigDir, "Blueprints.json");
            if (!File.Exists(blueprintsFile))
            {
                SaveTo(userConfigDir);
                return;
            }
            var loadedBlueprints = FromFile(blueprintsFile);
            if (loadedBlueprints!.OverrideIds)
            {
                OverrideIds = loadedBlueprints.OverrideIds;
                loadedBlueprints.NewBlueprints.ForEach(entry =>
                {
                    var (key, value) = entry;
                    if (NewBlueprints.ContainsKey(key))
                    {
                        NewBlueprints[key] = value;
                    }
                });
            }
            loadedBlueprints.AutoGenerated.ForEach(entry =>
            {
                var (key, value) = entry;
                AutoGenerated[key] = value;
            });
        }

        public void SaveTo(string userConfigDir)
        {
            var blueprintsFile = Path.Combine(userConfigDir, "Blueprints.json");
            File.WriteAllText(blueprintsFile, JsonConvert.SerializeObject(this, SerializerSettings));
        }

        public static Blueprints FromEmbeddedResource()
        {
            JsonSerializer serializer = JsonSerializer.Create();
            var resourcePath = $"SpellbookMerge.Config.Blueprints.json";
            var assembly = Assembly.GetExecutingAssembly();
            using Stream stream = assembly.GetManifestResourceStream(resourcePath)!;
            using StreamReader streamReader = new StreamReader(stream);
            using var reader = new JsonTextReader(streamReader);
            return serializer.Deserialize<Blueprints>(reader)!;
        }

        public static Blueprints? FromFile(string filename)
        {
            return JsonConvert.DeserializeObject<Blueprints>(File.ReadAllText(filename));
        }
    }
}